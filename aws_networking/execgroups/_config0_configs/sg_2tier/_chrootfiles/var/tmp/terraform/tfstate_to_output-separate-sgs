#!/usr/bin/env python

import os
import json

from config0_publisher.resource_manage import to_jsonfile
from config0_publisher.serialization import b64_encode

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

with open(terraform_state_file) as json_file:
    raw = json.load(json_file)

if not data:
    print("ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file)))
    exit(9)

results = []

for resource in data["resources"]:

    _type = resource["type"]
    if _type != "aws_security_group": continue

    for instance in resource["instances"]:

        _results = {}
        for _key,_value in resource["instances"][0]["attributes"].items():
            _results[_key] = _value

        _results["name"] = _results["tags"]["Name"]
        _results["sg_name"] = _results["tags"]["Name"]
        _results["security_group"] = _results["tags"]["Name"]
        _results["tags"] = [ _results["tags"]["Name"] ]
        _results["_id"] = _results["id"]
        _results["sg_id"] = _results["id"]
        _results["vpc_id"] = _results["vpc_id"]
        _results["arn"] = _results["arn"]
        _results["resource_type"] = "security_group"
        _results["provider"] = "aws"

        try:
            _results["region"] = _results["arn"].split(":")[3]
        except:
            print("could not get region from arn")

        if not _results.get("region") and os.environ.get("AWS_DEFAULT_REGION"): 
            _results["region"] = os.environ["AWS_DEFAULT_REGION"]
            _results["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

        if not _results.get("vpc_id") and os.environ.get("VPC_ID"): 
            _results["vpc_id"] = os.environ["VPC_ID"]

        if not _results.get("vpc") and os.environ.get("VPC_NAME"):
            _results["vpc"] = os.environ["VPC_NAME"]
            _results["vpc_name"] = os.environ["VPC_NAME"]

        if not results: 
            _results["main"] = True

            # changed 45234532 - moved over to b64 hash
            _results["raw"] = {"terraform":b64_encode(raw)}

        results.append(_results)
        break

# ref 34532045732
to_jsonfile(results,"resources.json")
