#!/usr/bin/env python

import os
import json
#from config0_publisher.utilities import print_json
from config0_publisher.resource_manage import to_jsonfile
from config0_publisher.serialization import b64_encode

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

with open(terraform_state_file) as json_file:
    raw = json.load(json_file)

if not data:
    print("ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file)))
    exit(9)

# get main vpc
for resource in data["resources"]:
    for instance in resource["instances"]:

        _type = resource["type"]
        if _type != "aws_vpc": continue

        vpc_resource = {}
        for _key,_value in resource["instances"][0]["attributes"].items():
            vpc_resource[_key] = _value

        vpc_resource["name"] = vpc_resource["tags"]["Name"]
        vpc_resource["vpc_name"] = vpc_resource["tags"]["Name"]
        vpc_resource["vpc"] = vpc_resource["tags"]["Name"]
        vpc_resource["tags"] = [ vpc_resource["tags"]["Name"] ]
        vpc_resource["_id"] = vpc_resource["id"]
        vpc_resource["vpc_id"] = vpc_resource["id"]
        vpc_resource["resource_type"] = "vpc"
        vpc_resource["provider"] = "aws"
        vpc_resource["main"] = True

        # changed 45234532 - moved over to b64 hash
        vpc_resource["raw"] = {"terraform":b64_encode(raw)}

        if os.environ.get("AWS_DEFAULT_REGION"): 
            vpc_resource["region"] = os.environ["AWS_DEFAULT_REGION"]
            vpc_resource["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

        results = vpc_resource
        break

# ref 34532045732
to_jsonfile(results,"vpc.json")
