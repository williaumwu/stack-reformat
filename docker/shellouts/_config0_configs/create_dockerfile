#!/usr/bin/env python

import os
import json
import jinja2
import sys
import subprocess

def run_cmd(cmd,exit_error=False):

    print('executing cmd "{}"'.format(cmd))

    p = subprocess.Popen(cmd,
                         shell=True,
                         stderr=subprocess.PIPE)

    while True:
        out = p.stderr.read(1)
        if out == '' and p.poll() is not None:
            break
        if out != '':
            sys.stdout.write(out)
            sys.stdout.flush()

    exitcode = p.returncode

    if exitcode == 0: return True

    print('FAILED: executing cmd "{}" failed'.format(cmd))
    print("exitcode {}".format(exitcode))

    if exit_error: exit(exitcode)
    return False

class DockerFileCreation(object):

    def __init__(self):

        self.docker_build_dir = os.environ.get("DOCKER_BUILD_DIR",
                                               "/var/tmp/docker/build")

        self.docker_file = os.environ.get("DOCKER_FILE",
                                          "Dockerfile")
        self.docker_file_dir = os.environ.get("DOCKER_FILE_DIR")
        self.docker_file_folder = os.environ.get("DOCKER_FILE_FOLDER")

        self.docker_env_file = os.environ.get("DOCKER_ENV_FILE")
        self.docker_template_replacements = os.environ.get("DOCKER_TEMPLATE_REPLACEMENTS")
        self.docker_image = os.environ.get("DOCKER_IMAGE")

    def copy_docker_env(self):

        if not self.docker_env_file: return

        if not os.path.exists(self.docker_env_file): 
            print("WARNING: $DOCKER_ENV_FILE {} not found.".format(self.docker_env_file))
            return

        if self.docker_env_file == os.path.join(self.docker_build_dir,".env"): return
        
        cmd = "cp -rp {} {}/.env".format(self.docker_env_file,
                                         self.docker_build_dir)
        run_cmd(cmd,
                exit_error=True)

    def set_dockfile_dir(self):

        if not self.docker_file_dir: self.docker_file_dir = self.docker_build_dir
        if not self.docker_file_folder: return

        self.docker_file_dir = os.path.join(self.docker_file_dir,
                                            self.docker_file_folder)
        os.environ["DOCKER_FILE_DIR"] = self.docker_file_dir

        print("The Dockerfile directory is located: {}".format(self.docker_file_idr))

    def from_scratch(self):
        
        #############################################################
        # Determine the fully qualified path of the dockerfile
        #############################################################
        self.docker_file = "{}/{}".format(self.docker_file_dir,
                                          self.docker_file)
        print("The Dockerfile is located: {}".format(self.docker_file))

        self.docker_run_cmds = os.environ.get("DOCKER_RUN_COMMANDS")
        self.docker_entrypoint_cmd = os.environ.get("DOCKER_ENTRYPOINT")
        self.docker_cmd = os.environ.get("DOCKER_CMD")
        #############################################################
        dockerfile = open(self.docker_file,"w")
        
        dockerfile.write("FROM {}".format(self.docker_base_img))
        dockerfile.write("\n")
        dockerfile.write("\n")
        dockerfile.write("#Autogenerated Dockerfile from config0")
        dockerfile.write("\n")
        dockerfile.write("\n")
        
        # Add run commands if provided by a string of cmds separated by "/"
        if self.docker_run_cmds:
            
            self.docker_run_cmds = json.loads(self.docker_run_cmds)
        
            for cmd in self.docker_run_cmds:
                dockerfile.write("RUN {}".format(cmd))
                dockerfile.write("\n")
        
            dockerfile.write("\n")
            dockerfile.write("\n")
        
        if self.docker_entrypoint_cmd:
            dockerfile.write("ENTRYPOINT {}".format(self.docker_entrypoint_cmd))
        
            dockerfile.write("\n")
            dockerfile.write("\n")
        
        if self.docker_cmd:
            dockerfile.write("CMD {}".format(self.docker_cmd))
        
            dockerfile.write("\n")
            dockerfile.write("\n")
        
        dockerfile.close()
    
        print("The Dockerfile was successful written here: {}".format(self.docker_file))
    
    def from_template(self):
    
        #############################################################
        self.docker_template_folder = os.environ.get("DOCKER_TEMPLATE_FOLDER")
        self.docker_template_file = os.environ.get("DOCKER_TEMPLATE_FILE",
                                                   "Dockerfile.ja2")

        if not self.docker_template_replacements:
            print('ERROR: "DOCKER_TEMPLATE_REPLACEMENTS" environment needs to be set create Dockerfile from Template')
            exit(5)
        
        self.docker_template_replacements = json.loads(self.docker_template_replacements)
        #############################################################
        # Determine the fully qualified path of the template directory
        #############################################################
        
        if self.docker_template_folder:
            self.docker_template_file = os.path.join(self.docker_file_dir,
                                                     self.docker_template_folder,
                                                     self.docker_template_file)
        else:
            self.docker_template_file = os.path.join(self.docker_file_dir,
                                                     self.docker_template_file)
        
        print("The Dockerfile template is located: {}".format(self.docker_template_file))
        
        #############################################################
        # Determine the fully qualified path of the dockerfile
        #############################################################
        self.docker_file = "{}/{}".format(os.path.dirname(self.docker_template_file),
                                          self.docker_file)
        print("The Dockerfile is located: {}".format(self.docker_file))
        
        #############################################################
        # Creating Template Setup
        #############################################################
        templateLoader = jinja2.FileSystemLoader(searchpath="/")
        templateEnv = jinja2.Environment(loader=templateLoader)
        template = templateEnv.get_template(self.docker_template_file)
        
        #############################################################
        # Determine replacements
        #############################################################
        
        templateVars = {}
        if self.docker_image: templateVars["DOCKER_IMAGE"] = self.docker_base_img
        for search,value in self.docker_template_replacements.items(): 
            templateVars[search] = value
        
        outputText = template.render( templateVars )
        
        writefile = open(self.docker_file,"w")
        writefile.write(outputText)
        writefile.close()
    
        print("The Dockerfile was successful written here: {}".format(self.docker_file))

    def run(self):

        self.set_dockfile_dir()
        self.copy_docker_env()

        self.docker_base_img = os.environ.get("DOCKER_BASE_IMAGE")

        if self.docker_template_replacements:
            self.from_template()
        elif self.docker_base_img:
            self.from_scratch()
            del os.environ["DOCKER_TEMPLATE_FILE"]
        else:
            self.docker_file = "{}/{}".format(self.docker_file_dir,
                                              self.docker_file)
            print('WARNING: Did not create the Dockerfile from either Template or from Scratch')
            print('Using Dockerfile here: {}'.format(self.docker_file))
            
        if not os.path.exists(self.docker_file): 
            msg = "ERROR: Cannot find Dockerfile expected here: \n\t{}".format(self.docker_file)
            raise Exception(msg)
            #exit(5)

        # Get the DOCKER_REPO to build the local path from the Dockerfile
        _docker_elements = self.docker_image.split(":")
        repo_name = _docker_elements[0]
        # fixfix777
        #DOCKER_REPO_TAG = _docker_elements[1]
        docker_elements = repo_name.split("/")
        # fixfix777
        #DOCKER_REGISTRY = docker_elements[0]
        #USERNAME = docker_elements[1]
        DOCKER_REPO = docker_elements[2]

        docker_file_dir = os.path.dirname(self.docker_file)
        docker_file_name = os.path.basename(self.docker_file)

        cmds = []
        if docker_file_dir != self.docker_build_dir:
            for _file in os.listdir(docker_file_dir):
                _path = os.path.join(self.docker_build_dir,
                                     _file)
                if not os.path.exists(os.path.join(_path)): continue
                cmds.append("rm -rf {}".format(_path))

            cmds.append("cp -rT {} {}".format(docker_file_dir,self.docker_build_dir))

        cmds.append("cd {}; docker build -t {} . -f {}".format(self.docker_build_dir,DOCKER_REPO,docker_file_name))
        # fixfix777
        #cmds.append("cd {}; docker build -t {} {} -f {}".format(self.docker_build_dir,DOCKER_REPO,self.docker_build_dir,self.docker_file))

        for cmd in cmds:
            status = run_cmd(cmd,
                             exit_error=None)

            if not status:
                msg = "ERROR: cmd = {} failed!".format(cmd)
                raise Exception(msg)
                # fixfix777
                #exit(exitcode)

if __name__ == '__main__':
    dockercreation = DockerFileCreation()
    dockercreation.run()

##################################################
# Testing Below
##################################################

# fixfix777
#DockerTemplateReplacements = {}
#DockerTemplateReplacements["AptGetPkgs"] = "vim netstat tmux screen"
#DockerTemplateReplacements["HelloTemplate"] = "Hello Gary"

# Optional Environmental Variables
#export DOCKER_ENV_FILE=${DOCKER_ENV_FILE:=/root/.env}
#export DOCKER_BASE_IMAGE=${DOCKER_BASE_IMAGE:=node}
#export DOCKER_RUN_COMMANDS=${DOCKER_RUN_COMMANDS:=sleep 30}
#export BUILD_BASEDIR="`dirname $DOCKER_ENV_FILE`"

###############################
## FROM TEMPLATE: Test 1
###############################
#export DOCKER_BASE_IMAGE="node:4.4"
#export DOCKER_IMAGE="docker.io/testuer/app_api:4.4"
#export DOCKER_TEMPLATE_REPLACEMENTS='{"HelloTemplate": "Hello Gary", "AptGetPkgs": "vim netstat tmux screen"}'
#export DOCKER_TEMPLATE_FILE="Dockerfile.ja2"
## check /var/tmp/docker/build/Dockerfile
#
###############################
## FROM TEMPLATE: Test 2
###############################
#export DOCKER_BASE_IMAGE="node:4.4"
#export DOCKER_IMAGE="docker.io/testuer/app_api:4.4"
#export DOCKER_TEMPLATE_REPLACEMENTS='{"HelloTemplate": "Hello Gary", "AptGetPkgs": "vim netstat tmux screen"}'
#export DOCKER_TEMPLATE_FILE="Dockerfile.ja2"
#export DOCKER_TEMPLATE_FOLDER="app"
### check /var/tmp/docker/build/app/Dockerfile
#
###############################
## FROM TEMPLATE: Test 3
###############################
#export DOCKER_BASE_IMAGE="node:4.4"
#export DOCKER_IMAGE="docker.io/testuer/app_api:4.4"
#export DOCKER_TEMPLATE_REPLACEMENTS='{"HelloTemplate": "Hello Gary", "AptGetPkgs": "vim netstat tmux screen"}'
#export DOCKER_TEMPLATE_FOLDER="app"
#
##This overides DOCKER_TEMPLATE_FOLDER because the path is absolute
#export DOCKER_TEMPLATE_FILE="/var/tmp/docker/build/templatefolder/Dockerfile.ja2"
## check /var/tmp/docker/build/app/Dockerfile

###############################
## FROM SCRATCH: Test 1
###############################
#export DOCKER_BASE_IMAGE="node:4.4"
#export DOCKER_RUN_COMMANDS='["apt-get install vim -y", "if [ -f /etc/service/nginx/down ]; then rm -f /etc/service/nginx/down; fi"]'
#export DOCKER_ENTRYPOINT='["bin/sleep", "900"]'
#export DOCKER_CMD='["usr/local/bin/gunicorn" "-w", "2", "-b", ":8000", "app:app"]'

