#!/usr/bin/env python

import os
import json
from config0_publisher.resource_manage import to_jsonfile
from config0_publisher.serialization import b64_encode

#from config0_publisher.utilities import print_json

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

with open(terraform_state_file) as json_file:
    raw = json.load(json_file)

if not data:
    print("ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file)))
    exit(9)

aws_type = "aws_ecr_repository"
resource_type = "ecr_repo"
provider = "aws"

for resource in data["resources"]:
    for instance in resource["instances"]:

        if resource["type"] != aws_type: continue

        _results = {}
        for _key,_value in resource["instances"][0]["attributes"].items():
            _results[_key] = _value

        _results["name"] = _results["id"]
        _results["tags"] = [ _results["name"] ]
        _results["_id"] = _results["arn"]
        _results["_id"] = _results["arn"].replace(":","_").replace("/","_")
        _results["resource_type"] = resource_type
        _results["provider"] = provider
        _results["main"] = True
        # changed 45234532 - moved over to b64 hash
        #results["raw"] = {"terraform":raw}
        _results["raw"] = {"terraform":b64_encode(raw)}
        _results["region"] = _results["arn"].split(":")[3]

        if os.environ.get("AWS_DEFAULT_REGION"): 
            _results["region"] = os.environ["AWS_DEFAULT_REGION"]
            _results["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

        results = _results
        break

# ref 34532045732
to_jsonfile(results,"ecr.json")
