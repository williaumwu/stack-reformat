#!/usr/bin/env python

import os
import json
from config0_publisher.resource_manage import to_jsonfile
from config0_publisher.serialization import b64_encode

#from config0_publisher.utilities import print_json

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

if not data:
    print("ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file)))
    exit(9)

if os.environ.get("TF_VAR_volume_name"): 
    name = os.environ["TF_VAR_volume_name"]
elif os.environ.get("EBS_VOLUME_NAME"): 
    name = os.environ["EBS_VOLUME_NAME"]
elif os.environ.get("VOLUME_NAME"):
    name = os.environ["VOLUME_NAME"]
else:
    name = "unknown-volume-name"

results = {"name":name}
results["resource_type"] = "ebs_volume"
results["provider"] = "aws"
results["main"] = True

# changed 45234532 - moved over to b64 hash
#results["raw"] = {"terraform":data}
results["raw"] = {"terraform":b64_encode(data)}

results["_id"] = data["resources"][0]["instances"][0]["attributes"]["id"]
results["volume_id"] = data["resources"][0]["instances"][0]["attributes"]["id"]
results["availability_zone"] = data["resources"][0]["instances"][0]["attributes"]["availability_zone"]
results["region"] = results["availability_zone"][:-1]
results["aws_default_region"] = results["availability_zone"][:-1]

#if os.environ.get("AWS_DEFAULT_REGION"): 
#    results["region"] = os.environ["AWS_DEFAULT_REGION"]
#    results["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

# ref 34532045732
to_jsonfile(results,"ebs.json")
