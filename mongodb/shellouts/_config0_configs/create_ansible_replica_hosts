#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2015

import os
import sys
#import jinja2

from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource_manage import ResourceCmdHelper
#from config0_publisher.templating import list_template_files

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        ResourceCmdHelper.__init__(self,
                                   app_name="ansible",
                                   set_must_exists=["stateful_id"])

        self.classname = 'MONGODB_ANSIBLE_HELPER'

        self.logger = Config0Logger(self.classname,
                                    logcategory="cloudprovider")

        self.logger.debug("Instantiating %s" % self.classname)

        # if you want to remap vars for the application in the inputargs
        # e.g. ANS_VAR_mongodb_public_ips to mongodb_public_ips
        self.remap_app_vars()

    def _set_vars(self):

        # re-mapped variables from ANSIBLE without prefixes

        self.public_ips = self.inputargs["mongodb_public_ips"].split(",")
        self.private_ips = self.inputargs["mongodb_private_ips"].split(",")
        self.config_ips = self.inputargs["mongodb_config_ips"].split(",")
        self.config_network = self.inputargs["mongodb_config_network"]

        self.clobber = self.inputargs.get("clobber",True)

        if self.clobber in [ "None", None, 'none' ]: 
            self.clobber = None
        
        try:
            self.main_public_ip,self.main_private_ip = self.inputargs["mongodb_main_ips"].split(",")
        except:
            self.main_public_ip = self.public_ips[0]
            self.main_private_ip = self.private_ips[0]
            self.logger.warn("ANS_VAR_/mongodb_main_ips not set")

        if len(self.private_ips) > 1:
            self.private_secondaries = self.private_ips[1:]
        else:
            self.private_secondaries = None

        self.config_file_path = "{}/hosts".format(self.exec_dir)
        self.config_file = open(self.config_file_path,"w")

    def _create_mongodb_keyfile(self):

        filepath = os.path.join(self.exec_dir,
                                "roles",
                                "init_replica_nodes",
                                "files",
                                "mongodb_keyfile")

        self.write_key_to_file(key="mongodb_keyfile",
                               filepath=filepath,
                               split_char="return",
                               deserialize=True,
                               add_return=True,
                               permission=400)

        #os.system("chmod 400 {}".format(filepath))

    def _create_mongodb_pem(self):

        filepath = os.path.join(self.exec_dir,
                                "roles",
                                "init_replica_nodes",
                                "files",
                                "mongodb.pem")

        self.write_key_to_file(key="mongodb_pem",
                               filepath=filepath,
                               split_char="return",
                               deserialize=True,
                               add_return=True,
                               permission=400)
        
    def _add_public(self):

        self.config_file.write('[public]')
        self.config_file.write("\n")

        for _ip in self.public_ips:
            self.config_file.write(_ip)
            self.config_file.write("\n")

        self.config_file.write("\n")

    def _add_private(self):

        self.config_file.write('[private]')
        self.config_file.write("\n")

        for _ip in self.private_ips:
            self.config_file.write(_ip)
            self.config_file.write("\n")

        self.config_file.write("\n")

    def _add_config_ips(self):

        self.config_file.write('[configuration]')
        self.config_file.write("\n")

        for _ip in self.config_ips:
            self.config_file.write(_ip)
            self.config_file.write("\n")

        self.config_file.write("\n")

    def _add_config_network(self):

        self.config_file.write('[config_network]')
        self.config_file.write("\n")
        self.config_file.write(self.config_network)
        self.config_file.write("\n")
        self.config_file.write("\n")

    def _add_main(self):

        self.config_file.write('[public_main]')
        self.config_file.write("\n")
        self.config_file.write(self.main_public_ip)
        self.config_file.write("\n")
        self.config_file.write("\n")
        self.config_file.write('[private_main]')
        self.config_file.write("\n")
        self.config_file.write(self.main_private_ip)
        self.config_file.write("\n")
        self.config_file.write("\n")

    def _add_secondaries(self):

        if not self.private_secondaries: return

        self.config_file.write('[private-secondaries]')
        self.config_file.write("\n")

        for _ip in self.private_secondaries:
            self.config_file.write(_ip)
            self.config_file.write("\n")

        self.config_file.write("\n")

    def create(self):

        # [public]
        # 13.212.156.196
        # 13.212.111.66
        # 13.229.147.37
        # 
        # [public_main]
        # 13.212.156.196
        # 
        # [private-main]
        # 172.31.5.4
        # 
        # [private-secondaries]
        # 172.31.10.21
        # 172.31.1.231

        self._set_vars()

        # update and clobber vars all and hosts
        self.templify(clobber=True)

        self._create_mongodb_keyfile()
        self._create_mongodb_pem()
        self._add_public()
        self._add_private()
        self._add_config_ips()
        self._add_config_network()
        self._add_main()
        self._add_secondaries()
        self.config_file.close()
        self.logger.debug("Created Ansible host config file {}".format(self.config_file_path))

        #self.sync_to_share()

def usage():

    print("""
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    create:
        JOB_INSTANCE_ID
        SCHEDULE_ID
        RUN_ID
        ANS_VAR_private_key
        ANS_VAR_mongodb_keyfile
        ANS_VAR_mongodb_pem
        ANS_VAR_mongodb_main_ips
        ANS_VAR_mongodb_config_network
        ANS_VAR_mongodb_public_ips
        ANS_VAR_mongodb_private_ips
        ANS_VAR_mongodb_config_ips
        METHOD

       """)
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    main.set_inputargs(add_app_vars=True)

    if main.inputargs.get("method","create") == "create":

        main.check_required_inputargs(keys=["mongodb_public_ips","mongodb_private_ips","mongodb_config_ips"])
        main.create()

    else:
        usage()
        print('method "{}" not supported!'.format(main.inputargs.get("method","create")))
        exit(4)
