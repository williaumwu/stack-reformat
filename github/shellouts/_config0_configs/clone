#!/usr/bin/env python

import os
import sys
from subprocess import Popen
from subprocess import PIPE
from subprocess import STDOUT
import string
import random

def create_git_ssh_wrapper(filename="/tmp/git_ssh"):

    if os.path.exists(filename): return filename

    file_content = '''
#!/bin/bash

trap 'rm -f /tmp/.git_ssh.$$' 0

if [ "$1" = "-i" ]; then
    SSH_KEY=$2; shift; shift
    echo "GIT_TERMINAL_PROMPT=0 ssh -i $SSH_KEY -o StrictHostKeyChecking=no -oBatchMode=yes \$@" > /tmp/.git_ssh.$$
    chmod +x /tmp/.git_ssh.$$
    export GIT_SSH=/tmp/.git_ssh.$$
fi

[ "$1" = "git" ] && shift

# Run the git command
git "$@"
'''
    config_run = open(filename,'w')
    config_run.write(file_content)
    config_run.close()
    os.system("chmod 755 %s" % filename)

    return filename

def execute_return_exit(cmd):
  
    process = Popen(cmd,shell=True,bufsize=0,stdout=PIPE,stderr=STDOUT)
  
    line = process.stdout.readline()
  
    while line:
        line = line.strip()
        print(line)
        line = process.stdout.readline()
  
    out,error = process.communicate()
    exitcode = process.returncode
  
    return exitcode

def run_cmd(cmd,exit_error=False):

    print('executing cmd "{}"'.format(cmd))

    exitcode = execute_return_exit(cmd)
    if exitcode == 0: return True

    if exit_error: exit(exitcode)

    return False

def run_cmds(cmds,exit_error=True):

    for cmd in cmds:
        print('Executing "{}"'.format(cmd))
        exitcode = execute_return_exit(cmd)
        if exitcode == 0: continue
        print('Executing "{}" failed with exitcode={}'.format(cmd,exitcode))
        if exit_error: sys.exit(1)
        return False

    return True

def execute(cmd,unbuffered=False):

    '''executes a shell command, returning status of execution,
    standard out, and standard error'''

    process = Popen(cmd,shell=True,bufsize=0,stdout=PIPE,stderr=STDOUT)

    line = process.stdout.readline()

    while line:
        line = line.strip()
        print(line)

    out,error = process.communicate()
    exitcode = process.returncode

    return exitcode

def id_generator(size=6,chars=string.ascii_uppercase+string.digits):

    '''generates id randomly'''

    return ''.join(random.choice(chars) for x in range(size))

def git_clone_repo():

    '''
    does a simple clone if repo doesn't exists 
    or does a pull if does exists
    '''

    repo_dir = os.environ["DOCKER_BUILD_DIR"]
    git_url = os.environ.get("REPO_URL")
    prv_key_loc = os.environ.get("REPO_KEY_LOC")
    commit = os.environ.get("COMMIT_HASH")
    branch = os.environ.get("REPO_BRANCH","main")

    if not git_url:
        print("git_url not given, not cloning %s" % (repo_dir))
        return False

    if prv_key_loc:
        wrapper_script = create_git_ssh_wrapper()
        base_cmd = "{} -i {}".format(wrapper_script,prv_key_loc)
        git_url = git_url.replace("https://github.com/","git@github.com:")
    else:
        base_cmd = None

    cmds = []

    if os.path.exists(repo_dir): cmds.append("rm -rf {}".format(repo_dir))

    _branch = "main"

    if not branch: 
        _branch = branch

    add_cmd = "git clone -b {} {} {}".format(_branch,git_url,repo_dir)

    if base_cmd:
        cmds.append("{} {}".format(base_cmd,add_cmd))
    else:
        cmds.append(add_cmd)

    if commit:
        add_cmd = "git checkout {}".format(commit)
        cmds.append("cd {}; {}".format(repo_dir,add_cmd))

    run_cmds(cmds)

    return True

if __name__ == '__main__':
    git_clone_repo()
