#!/usr/bin/env python

import os
import json
from config0_publisher.resource_manage import to_jsonfile
from config0_publisher.serialization import b64_encode

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

if not data:
    print("ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file)))
    exit(9)

name = data["resources"][0]["instances"][0]["attributes"]["name"]

results = {"name":name}
results["hostname"] = name
results["resource_type"] = "server"
results["provider"] = "do"
results["main"] = True
results["_id"] = data["resources"][0]["instances"][0]["attributes"]["id"]
results["image"] = data["resources"][0]["instances"][0]["attributes"]["image"]
results["urn"] = data["resources"][0]["instances"][0]["attributes"]["urn"]
results["private_ip"] = data["resources"][0]["instances"][0]["attributes"]["ipv4_address_private"]
results["public_ip"] = data["resources"][0]["instances"][0]["attributes"]["ipv4_address"]
results["region"] = data["resources"][0]["instances"][0]["attributes"]["region"]
results["tags"] = [ results["_id"], name ]

# changed 45234532 - moved over to b64 hash
#results["raw"] = {"terraform":data}
results["raw"] = {"terraform":b64_encode(data)}

results["terraform_resource_type"] = "digitalocean_droplet"

# ref 34532045732
to_jsonfile(results,"vm.json")
